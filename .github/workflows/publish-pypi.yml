name: publish-to-PyPI

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+-alpha.[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+-beta.[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+-rc.[0-9]+"
    paths-ignore:
      - 'docs/**'
      - 'mkdocs.yml'

env:
  PACKAGE_NAME: "irene-sankey"

jobs:
  details:
    name: Extract Tag Details
    runs-on: ubuntu-latest
    environment: release-with-approval
    outputs:
      new_version: ${{ steps.extract_tag.outputs.new_version }}
      suffix: ${{ steps.extract_tag.outputs.suffix }}
      tag_name: ${{ steps.extract_tag.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Extract Tag and Details
        id: extract_tag
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          NEW_VERSION=$(echo $TAG_NAME | awk -F'-' '{print $1}')
          SUFFIX=$(echo $TAG_NAME | grep -oP '[a-z]+[0-9]+' || echo "")
          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
          echo "suffix=$SUFFIX" >> "$GITHUB_OUTPUT"
          echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"

  test_backward_compatibility:
    name: Test Backward Compatibility
    needs: details
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies for testing
        run: |
          python -m pip install --upgrade pip
          pip install tox

      - name: Run Tox Tests
        run: tox

  check_pypi:
    name: Check PyPI
    needs: [details, test_backward_compatibility]
    runs-on: ubuntu-latest
    steps:
      - name: Fetch PyPI Version
        run: |
          response=$(curl -s https://pypi.org/pypi/${{ env.PACKAGE_NAME }}/json || echo "{}")
          latest_previous_version=$(echo $response | grep -oP '"releases":\{"\K[^"]+' | sort -rV | head -n 1)
          if [ -z "$latest_previous_version" ]; then
            echo "Package not found on PyPI."
            latest_previous_version="0.0.0"
          fi
          echo "Latest version on PyPI: $latest_previous_version"
          echo "latest_previous_version=$latest_previous_version" >> $GITHUB_ENV

      - name: Compare Versions
        run: |
          NEW_VERSION=${{ needs.details.outputs.new_version }}
          LATEST_VERSION=$latest_previous_version
          if [ "$(printf '%s\n' "$LATEST_VERSION" "$NEW_VERSION" | sort -rV | head -n 1)" != "$NEW_VERSION" ] || [ "$NEW_VERSION" == "$LATEST_VERSION" ]; then
            echo "The new version $NEW_VERSION is not greater than the latest version $LATEST_VERSION on PyPI."
            exit 1
          else
            echo "The new version $NEW_VERSION is greater than the latest version $LATEST_VERSION on PyPI."
          fi

  setup_and_build:
    name: Setup and Build
    needs: [details, check_pypi]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Set Project Version
        run: poetry version ${{ needs.details.outputs.new_version }}

      - name: Install Dependencies
        run: poetry install --sync --no-interaction

      - name: Build Distribution
        run: poetry build

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  pypi_publish:
    name: Publish to PyPI
    needs: [setup_and_build]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Publish Distribution
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_TOKEN }}

  github_release:
    name: Create GitHub Release
    needs: [setup_and_build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Check if Release Exists
        id: check_release
        run: |
          if gh release view ${{ needs.details.outputs.tag_name }} > /dev/null 2>&1; then
            echo "skip=true" >> $GITHUB_ENV
          else
            echo "skip=false" >> $GITHUB_ENV
          fi

      - name: Create GitHub Release
        if: env.skip == 'false'
        run: |
          gh release create ${{ needs.details.outputs.tag_name }} dist/* --title ${{ needs.details.outputs.tag_name }} --generate-notes
